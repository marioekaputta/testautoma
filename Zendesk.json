{"createdAt":"2021-09-06T06:32:02.745Z","updatedAt":"2021-11-07T14:30:30.853Z","deletedAt":null,"id":72,"name":"Zendesk","logoUrl":"https://storage.googleapis.com/otomatis/appicons/18/1636295428485-otomatis_zendesk (1).png","description":null,"homepageUrl":null,"requestUrl":null,"errorReporterEmail":null,"hasAction":true,"hasTrigger":true,"isPremiumApp":false,"createdById":15,"publishedAt":"2021-05-08T03:20:17.432Z","submittedAt":"2021-05-08T03:20:09.927Z","public":true,"teamId":null,"isNativeApp":false,"timeOut":30000,"triggers":[{"createdAt":"2021-08-30T09:27:32.206Z","updatedAt":"2022-04-14T07:35:02.529Z","deletedAt":null,"id":101,"name":"Get Priority","type":"polling","applicationId":72,"httpRequestId":253,"dummyTriggerHttpRequestId":null,"subscribeHttpRequestId":null,"unsubscribeHttpRequestId":null,"findLastStateFunc":null,"stateKeyMap":"({data, globalVar}) => {\n    // const data_target = data.ticket_fields.filter(f => f.title==='Priority').map(f => f.system_field_options)\n    // return data_target[0].map(c => ({ key: c.value, label: c.name }))\n    return globalVar.test(1,2,2)\n}","paramSchema":null,"authenticationId":51,"description":"Get Priority","condition":null,"isAsc":false,"versionId":78,"examplePayload":null,"visibility":"hidden","webhookResponseFunc":null,"testGuideline":null,"similarityThreshold":null,"isAggregator":null,"isGlobalAggregator":false,"isDraft":false,"isUsingPagination":null,"cron":null,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-30T09:28:23.000Z","updatedAt":"2022-04-14T07:35:02.436Z","deletedAt":null,"id":253,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/ticket_fields.json","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}},"dummyTriggerHttpRequest":null,"subscribeHttpRequest":null,"unsubscribeHttpRequest":null},{"createdAt":"2021-08-30T10:21:57.631Z","updatedAt":"2021-08-30T10:30:44.388Z","deletedAt":null,"id":103,"name":"Get Type","type":"polling","applicationId":72,"httpRequestId":255,"dummyTriggerHttpRequestId":null,"subscribeHttpRequestId":null,"unsubscribeHttpRequestId":null,"findLastStateFunc":null,"stateKeyMap":"({data}) => {\r\n    const data_target = data.ticket_fields.filter(f => f.title==='Type').map(f => f.system_field_options)\r\n    return data_target[0].map(c => ({ key: c.value, label: c.name }))\r\n}","paramSchema":null,"authenticationId":51,"description":"Get Type","condition":null,"isAsc":false,"versionId":78,"examplePayload":null,"visibility":"hidden","webhookResponseFunc":null,"testGuideline":null,"similarityThreshold":null,"isAggregator":null,"isGlobalAggregator":false,"isDraft":false,"isUsingPagination":null,"cron":null,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-30T10:30:01.103Z","updatedAt":"2021-08-30T10:30:44.320Z","deletedAt":null,"id":255,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/ticket_fields.json","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}},"dummyTriggerHttpRequest":null,"subscribeHttpRequest":null,"unsubscribeHttpRequest":null},{"createdAt":"2021-05-07T10:07:55.276Z","updatedAt":"2021-08-30T10:20:41.142Z","deletedAt":null,"id":104,"name":"Get Ticket Forms","type":"polling","applicationId":72,"httpRequestId":256,"dummyTriggerHttpRequestId":null,"subscribeHttpRequestId":null,"unsubscribeHttpRequestId":null,"findLastStateFunc":null,"stateKeyMap":"({ data }) => data.ticket_forms.map(form => ({ key: form.id, label: form.name }))","paramSchema":null,"authenticationId":51,"description":"Get ticket forms","condition":null,"isAsc":false,"versionId":78,"examplePayload":null,"visibility":"hidden","webhookResponseFunc":null,"testGuideline":null,"similarityThreshold":null,"isAggregator":false,"isGlobalAggregator":false,"isDraft":false,"isUsingPagination":false,"cron":null,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-05-07T10:07:55.029Z","updatedAt":"2021-08-30T10:20:41.075Z","deletedAt":null,"id":256,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/ticket_forms","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}},"dummyTriggerHttpRequest":null,"subscribeHttpRequest":null,"unsubscribeHttpRequest":null},{"createdAt":"2021-08-16T05:32:46.261Z","updatedAt":"2021-08-30T02:22:13.652Z","deletedAt":null,"id":105,"name":"Ticket is Updated","type":"hook","applicationId":72,"httpRequestId":null,"dummyTriggerHttpRequestId":null,"subscribeHttpRequestId":null,"unsubscribeHttpRequestId":null,"findLastStateFunc":null,"stateKeyMap":null,"paramSchema":null,"authenticationId":51,"description":"Ticket is updated","condition":"({ data, authData }) => data?.ticket_url.match(new RegExp(`${authData.prefix}`, 'gi'))","isAsc":false,"versionId":78,"examplePayload":null,"visibility":"visible","webhookResponseFunc":null,"testGuideline":"Before you can use this trigger, you need to add new trigger in your Zendesk account.\r\nNote: if you already create trigger in Zendesk, you can skip the steps below and test it.\r\nHere is how you can add new trigger in Zendesk account:\r\n1. Go to admin panel, click extensions in settings\r\n2. Click \"add target\", then select HTTP Target\r\n3. Copy the webhook URL down below and add it to your Zendesk HTTP target\r\n4. Create Trigger in Zendesk and fill all conditions and select action to notify trigger. Conditions: Ticket Is Updated; Action: Notify Target [Extensions you created]\r\n\r\nNow, you're all set to use the trigger.\r\nTo test your trigger, follow the instructions down below:\r\n1. Go to your zendesk homepage\r\n2. If you already have a ticket for testing purpose, you can open the ticket and click submit. Then you can click the \"Test\" button below and finish the trigger test \r\n3. If you didn't have a ticket for testing purose, click on \"+ Add\" button on to create new ticket\r\n4. Fill the subject and description, then submit the ticket\r\n5. Open the ticket and submit again\r\n6. Click the \"Test\" button below","similarityThreshold":null,"isAggregator":true,"isGlobalAggregator":false,"isDraft":false,"isUsingPagination":false,"cron":null,"idempotencyKeyMap":null,"httpRequest":null,"dummyTriggerHttpRequest":null,"subscribeHttpRequest":null,"unsubscribeHttpRequest":null},{"createdAt":"2021-08-16T07:42:37.914Z","updatedAt":"2021-08-27T09:36:16.269Z","deletedAt":null,"id":107,"name":"Get Users","type":"polling","applicationId":72,"httpRequestId":257,"dummyTriggerHttpRequestId":null,"subscribeHttpRequestId":null,"unsubscribeHttpRequestId":null,"findLastStateFunc":null,"stateKeyMap":"({ data }) => data.users.map(user => ({ key: user.id, label: user.name }))","paramSchema":null,"authenticationId":51,"description":"Get list users","condition":null,"isAsc":false,"versionId":78,"examplePayload":null,"visibility":"hidden","webhookResponseFunc":null,"testGuideline":null,"similarityThreshold":null,"isAggregator":null,"isGlobalAggregator":false,"isDraft":false,"isUsingPagination":false,"cron":null,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-16T07:44:16.853Z","updatedAt":"2021-08-27T09:36:16.190Z","deletedAt":null,"id":257,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/users.json","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}},"dummyTriggerHttpRequest":null,"subscribeHttpRequest":null,"unsubscribeHttpRequest":null},{"createdAt":"2021-08-16T07:45:04.402Z","updatedAt":"2021-08-27T08:36:55.485Z","deletedAt":null,"id":108,"name":"Get Tickets","type":"polling","applicationId":72,"httpRequestId":258,"dummyTriggerHttpRequestId":null,"subscribeHttpRequestId":259,"unsubscribeHttpRequestId":null,"findLastStateFunc":null,"stateKeyMap":"({ data }) => data.results.map(result => ({ key: result.id, label: result.subject }))","paramSchema":null,"authenticationId":null,"description":"Get list tickets","condition":null,"isAsc":false,"versionId":78,"examplePayload":null,"visibility":"hidden","webhookResponseFunc":"({ data }) => data.tickets.map(ticket => ({ key: ticket.id, label: ticket.subject }))","testGuideline":null,"similarityThreshold":null,"isAggregator":null,"isGlobalAggregator":false,"isDraft":false,"isUsingPagination":false,"cron":null,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-16T07:46:13.288Z","updatedAt":"2021-08-27T08:36:55.419Z","deletedAt":null,"id":258,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/search.json?query=type:ticket status<solved","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}},"dummyTriggerHttpRequest":null,"subscribeHttpRequest":{"createdAt":"2021-08-16T07:45:55.350Z","updatedAt":"2021-08-16T07:45:55.350Z","deletedAt":null,"id":259,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/tickets","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":null},"unsubscribeHttpRequest":null},{"createdAt":"2021-08-27T05:21:55.407Z","updatedAt":"2021-08-30T10:27:47.507Z","deletedAt":null,"id":109,"name":"Get Status","type":"polling","applicationId":72,"httpRequestId":260,"dummyTriggerHttpRequestId":null,"subscribeHttpRequestId":null,"unsubscribeHttpRequestId":null,"findLastStateFunc":null,"stateKeyMap":"({data}) => {\r\n    const data_target = data.ticket_fields.filter(f => f.title==='Status').map(f => f.system_field_options)\r\n    return data_target[0].map(c => ({ key: c.value, label: c.name }))\r\n}","paramSchema":[],"authenticationId":51,"description":"Get list status","condition":null,"isAsc":false,"versionId":78,"examplePayload":null,"visibility":"hidden","webhookResponseFunc":null,"testGuideline":null,"similarityThreshold":null,"isAggregator":null,"isGlobalAggregator":false,"isDraft":false,"isUsingPagination":null,"cron":null,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-27T05:34:50.000Z","updatedAt":"2021-08-30T10:27:47.441Z","deletedAt":null,"id":260,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/ticket_fields.json","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}},"dummyTriggerHttpRequest":null,"subscribeHttpRequest":null,"unsubscribeHttpRequest":null},{"createdAt":"2021-08-16T07:11:22.737Z","updatedAt":"2021-08-30T02:17:05.726Z","deletedAt":null,"id":110,"name":"New Ticket is Created","type":"hook","applicationId":72,"httpRequestId":null,"dummyTriggerHttpRequestId":null,"subscribeHttpRequestId":null,"unsubscribeHttpRequestId":null,"findLastStateFunc":null,"stateKeyMap":null,"paramSchema":null,"authenticationId":51,"description":"Ticket is created","condition":"({ data, authData }) => data?.ticket_url.match(new RegExp(`${authData.prefix}`, 'gi'))","isAsc":false,"versionId":78,"examplePayload":null,"visibility":"visible","webhookResponseFunc":null,"testGuideline":"Before you can use this trigger, you need to add new trigger in your Zendesk account.\r\nNote: if you already create trigger in Zendesk, you can skip the steps below and test it.\r\nHere is how you can add new trigger in Zendesk account:\r\n1. Go to admin panel, click extensions in settings\r\n2. Click \"add target\", then select HTTP Target\r\n3. Copy the webhook URL down below and add it to your Zendesk HTTP target\r\n4. Create Trigger in Zendesk and fill all conditions and select action to notify trigger. Conditions: Ticket Is Created; Action: Notify Target [Extensions you created]\r\n\r\nNow, you're all set to use the trigger.\r\nTo test your trigger, follow the instructions down below:\r\n1. Go to your zendesk homepage\r\n2. Click on \"+ Add\" button on to create new ticket\r\n3. Fill the subject and description\r\n4. Submit the ticket\r\n5. Click the \"Test\" button below","similarityThreshold":null,"isAggregator":true,"isGlobalAggregator":false,"isDraft":false,"isUsingPagination":false,"cron":null,"idempotencyKeyMap":null,"httpRequest":null,"dummyTriggerHttpRequest":null,"subscribeHttpRequest":null,"unsubscribeHttpRequest":null},{"createdAt":"2021-08-10T07:39:33.899Z","updatedAt":"2022-01-25T09:46:19.311Z","deletedAt":null,"id":106,"name":"New Comment by Agent","type":"hook","applicationId":72,"httpRequestId":null,"dummyTriggerHttpRequestId":null,"subscribeHttpRequestId":null,"unsubscribeHttpRequestId":null,"findLastStateFunc":null,"stateKeyMap":"","paramSchema":null,"authenticationId":51,"description":"Add a comment event from an agent","condition":"() => {return true}","isAsc":false,"versionId":78,"examplePayload":null,"visibility":"visible","webhookResponseFunc":"","testGuideline":"Before you can use this trigger, you need to add new trigger in your Zendesk account.\r\nNote: if you already create trigger in Zendesk, you can skip the steps below and test it.\r\nHere is how you can add new trigger in Zendesk account:\r\n1. Go to admin panel, click extensions in settings\r\n2. Click \"add target\", then select HTTP Target\r\n3. Copy the webhook URL down below and add it to your Zendesk HTTP target\r\n4. Create Trigger in Zendesk and fill all conditions and select action to notify trigger. Conditions: Comment Is Public, Current User Is Agent, Update Via Is Web Form, and you can custom more conditions regarding the needs of the scenario; Action: Notify Target [Extensions you created]. \r\n5. Note that we highly recommend you add custom conditions, especially if you're using this trigger with a lot of different apps. Example: Tags contains at least [tokopedia, shopee]. To make sure the scenario triggered by the right ticket.\r\n\r\nNow, you're all set to use the trigger.\r\nTo test your trigger, follow the instructions down below:\r\n1. Go to your zendesk homepage\r\n2. If you already have a ticket for testing purpose; you can open the ticket, add comment, and click submit. Then you can click the \"Test\" button below and finish the trigger test \r\n3. If you didn't have a ticket for testing purpose; you must create one using otomatis action \"Create Ticket\". You can do it down within this scenario down below.\r\n4. Open the ticket you just created, add comment, and submit again\r\n5. Click the \"Test\" button below","similarityThreshold":null,"isAggregator":true,"isGlobalAggregator":false,"isDraft":false,"isUsingPagination":false,"cron":null,"idempotencyKeyMap":null,"httpRequest":null,"dummyTriggerHttpRequest":null,"subscribeHttpRequest":null,"unsubscribeHttpRequest":null},{"createdAt":"2021-08-23T07:29:48.841Z","updatedAt":"2022-04-01T04:00:21.205Z","deletedAt":null,"id":102,"name":"User is Created","type":"polling","applicationId":72,"httpRequestId":254,"dummyTriggerHttpRequestId":null,"subscribeHttpRequestId":null,"unsubscribeHttpRequestId":null,"findLastStateFunc":null,"stateKeyMap":"({data}) => data.users.map((user) => ({ id: user.id, user }))","paramSchema":[],"authenticationId":51,"description":"User is Created","condition":"({data}) => {return data.count > -1}","isAsc":false,"versionId":78,"examplePayload":null,"visibility":"visible","webhookResponseFunc":null,"testGuideline":"To test your trigger, follow the instructions down below:\r\n1. Go to your zendesk homepage\r\n2. Click on \"+ Add\" button on to create new user\r\n3. Fill the name and other field, then click Add to create user\r\n4. Click the \"Test\" button below","similarityThreshold":null,"isAggregator":true,"isGlobalAggregator":false,"isDraft":false,"isUsingPagination":null,"cron":null,"idempotencyKeyMap":"{{{[data].[id]}}}","httpRequest":{"createdAt":"2021-08-24T07:29:03.000Z","updatedAt":"2022-04-01T04:00:21.107Z","deletedAt":null,"id":254,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/users/search.json?sort_by=created_at&sort_order=desc","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}},"dummyTriggerHttpRequest":null,"subscribeHttpRequest":null,"unsubscribeHttpRequest":null}],"actions":[{"createdAt":"2021-08-23T06:19:55.167Z","updatedAt":"2021-08-23T06:33:50.980Z","deletedAt":null,"id":72,"name":"Mark Ticket as Spam and Suspend Requester","type":"http","category":null,"applicationId":72,"httpRequestId":263,"paramSchema":[{"key":"id","type":"string","label":"Ticket Id","required":true,"triggerId":108}],"authenticationId":51,"description":"Mark Ticket as Spam and Suspend Requester","versionId":78,"examplePayload":null,"stateKeyMap":null,"isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-23T06:24:01.276Z","updatedAt":"2021-08-23T06:33:50.817Z","deletedAt":null,"id":263,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/tickets/{{{params.id}}}/mark_as_spam.json","method":"put","headers":{"Accept":"application/json","Content-Type":"application/json"},"body":null,"getBodyFunc":"({ params }) => ({\r\n  \"ticket\": {\r\n    \"id\": params.id\r\n  }\r\n})","auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-08-23T10:14:11.736Z","updatedAt":"2021-08-24T05:15:17.576Z","deletedAt":null,"id":73,"name":"Update User","type":"http","category":null,"applicationId":72,"httpRequestId":264,"paramSchema":[{"key":"id","type":"string","label":"User Id","required":true,"triggerId":107},{"key":"name","type":"string","label":"Name"},{"key":"email","type":"string","label":"Email"},{"key":"role","type":"string","label":"Role","options":["end-user","agent","admin"]},{"key":"phone","type":"string","label":"Phone Number"},{"key":"notes","type":"string","label":"Notes"},{"key":"details","type":"string","label":"Detail"},{"key":"tags","type":"string","label":"Tags","helpText":"Tags will be helpful to identify the user. If you want to enter more than one tag, use comma (,) as the separator and no space. Example: message,tokopedia"}],"authenticationId":51,"description":"Update Existing User","versionId":78,"examplePayload":null,"stateKeyMap":null,"isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-23T10:40:47.000Z","updatedAt":"2021-08-23T10:43:36.000Z","deletedAt":null,"id":264,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/users/{{{params.id}}}.json","method":"put","headers":{"Accept":"application/json","Content-Type":"application/json"},"body":{"user":{"name":"{{params.name}}","role":"{{params.role}}","tags":"{{params.tags}}","email":"{{params.email}}","notes":"{{params.notes}}","phone":"{{params.phone}}","details":"{{params.details}}"}},"getBodyFunc":"({ params }) => ({\n  \"user\": {\n    \"id\":params.id,\n    \"name\":params.name,\n    \"email\":params.email,\n    \"phone\":params.phone,\n    \"role\":params.role,\n    \"details\":params.details,\n    \"notes\":params.notes,\n    \"tags\":params.tags\n  }\n})","auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-08-30T07:08:58.432Z","updatedAt":"2021-08-30T11:00:59.801Z","deletedAt":null,"id":75,"name":"Update Ticket","type":"http","category":null,"applicationId":72,"httpRequestId":266,"paramSchema":[{"key":"id","type":"string","label":"Ticket","required":true,"triggerId":108},{"key":"subject","type":"string","label":"Subject"},{"key":"requester_id","type":"string","label":"Requester","required":false,"triggerId":107},{"key":"comment","type":"string","label":"Comment","helpText":"Note that the comment's author will be added by login account and set to be public comment. To custom author and publicity of the comment, use action Create New Comment on Ticket or Add Internal Note to Ticket","required":false},{"key":"type","type":"string","label":"Type","required":false,"triggerId":103},{"key":"priority","type":"string","label":"Priority","helpText":"","required":false,"triggerId":101},{"key":"tags","type":"string","label":"Tags","helpText":" Note that the tags replace any existing tags. To keep existing tags, use action Add Tags"},{"key":"status","type":"string","label":"Status","required":false,"triggerId":109},{"key":"","type":"Dynamic Field","label":"Dynamic Field","required":false,"paramSchemaFunc":"async ({ authData, params }, module) => {\n    if (!authData || !params || !authData.prefix || !params.id) return []\n\n    const axios = module.require('axios')\n    const ticketIds = await axios.get(`https://${authData.prefix}.zendesk.com/api/v2/tickets/${params.id}.json`, {\n        auth: {\n            username: authData.username,\n            password: authData.password\n        }\n    })\n\n\n    const respIds = await axios.get(`https://${authData.prefix}.zendesk.com/api/v2/ticket_forms/${ticketIds.data.ticket.ticket_form_id}.json`, {\n        auth: {\n            username: authData.username,\n            password: authData.password\n        }\n    })\n    const ids = respIds.data.ticket_form.ticket_field_ids\n    const respFields = await axios.get(`https://${authData.prefix}.zendesk.com/api/v2/ticket_fields.json`, {\n        auth: {\n            username: authData.username,\n            password: authData.password\n        }\n    })\n    return respFields.data.ticket_fields.filter(f => f.removable && ids.includes(f.id)).map(f => ({\n        key: f.id,\n        label: f.title,\n        required: false,\n        type: 'string',\n        options: (f.custom_field_options || f.system_field_options) && (f.custom_field_options || f.system_field_options).length ? (f.custom_field_options || f.system_field_options).map(c => c.value) : undefined\n    }))\n}"}],"authenticationId":51,"description":"Update Ticket","versionId":78,"examplePayload":null,"stateKeyMap":null,"isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-30T07:12:35.000Z","updatedAt":"2021-08-30T07:14:26.000Z","deletedAt":null,"id":266,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/tickets/{{{params.id}}}.json","method":"put","headers":{"Accept":"application/json","Content-Type":"application/json"},"body":null,"getBodyFunc":"({ params }) => ({\r\n  \"ticket\": {\r\n    \"comment\": {\r\n      \"body\": params.comment\r\n    },\r\n    \"tags\": params.tags,\r\n    \"subject\": params.subject,\r\n    \"requester_id\": params.requester_id,\r\n    \"type\": params.type,\r\n    \"priority\": params.priority,\r\n    \"status\": params.status,\r\n    \"custom_fields\": Object.keys(params).filter(p => !isNaN(p)).map(p => ({ id: p, value: params[p] }))\r\n  }\r\n})","auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-08-10T10:34:58.975Z","updatedAt":"2021-08-26T05:45:05.228Z","deletedAt":null,"id":76,"name":"Create User","type":"http","category":null,"applicationId":72,"httpRequestId":267,"paramSchema":[{"key":"name","type":"string","label":"Name","required":true},{"key":"email","type":"string","label":"Email"},{"key":"phone","type":"string","label":"Phone Number","required":false},{"key":"role","type":"string","label":"Role","options":["end-user","agent","admin"]},{"key":"details","type":"string","label":"Detail","helpText":"Any details you want to store about the user, such as an address"},{"key":"notes","type":"string","label":"Notes","helpText":"Any notes you want to store about the user"},{"key":"tags","type":"string","label":"Tags","helpText":"Tags will be helpful to identify the user. If you want to enter more than one tag, use comma (,) as the separator and no space. Example: message,tokopedia"}],"authenticationId":51,"description":"Create User","versionId":78,"examplePayload":null,"stateKeyMap":"","isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-10T10:36:47.000Z","updatedAt":"2021-08-10T10:36:49.000Z","deletedAt":null,"id":267,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/users.json","method":"post","headers":{"Accept":"application/json","Content-Type":"application/json"},"body":{"user":{"name":"{{params.name}}","role":"{{params.role}}","tags":"{{params.tags}}","email":"{{params.email}}","notes":"{{params.notes}}","phone":"{{params.phone}}","details":"{{params.details}}"}},"getBodyFunc":"({ params }) => ({\r\n  \"user\": {\r\n    \"name\": params.name,\r\n    \"notes\": params.notes,\r\n    \"details\": params.details,\r\n    \"email\": params.email,\r\n    \"phone\": params.phone,\r\n    \"role\": params.role,\r\n    \"tags\": params.tags\r\n  }\r\n})","auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-08-19T05:02:59.133Z","updatedAt":"2021-08-20T06:25:58.815Z","deletedAt":null,"id":77,"name":"Add Tags to Ticket","type":"http","category":null,"applicationId":72,"httpRequestId":268,"paramSchema":[{"key":"id","type":"string","label":"Ticket Id","required":true,"triggerId":108},{"key":"tags","type":"string","label":"Tags","helpText":"Enter the tag identifier for the ticket. If you want to enter more than one tag, use comma (,) as the separator and no space. Example for findings Tokopedia-related ticket: msg_id,tokopedia","required":true}],"authenticationId":51,"description":"Add more tags to ticket","versionId":78,"examplePayload":null,"stateKeyMap":null,"isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-19T05:08:12.000Z","updatedAt":"2021-08-19T05:26:17.000Z","deletedAt":null,"id":268,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/tickets/update_many.json?ids={{{params.id}}}","method":"put","headers":{"Accept":"application/json","Content-Type":"application/json"},"body":{"ticket":{"id":"{{params.id}}","additional_tags":"{{params.tags}}"}},"getBodyFunc":"({ params }) => ({\r\n  \"ticket\": {\r\n    \"additional_tags\": params.tags,\r\n    \"id\": params.id\r\n  }\r\n})","auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-08-19T06:36:36.898Z","updatedAt":"2021-08-19T07:57:19.145Z","deletedAt":null,"id":80,"name":"Merge Ticket","type":"http","category":null,"applicationId":72,"httpRequestId":271,"paramSchema":[{"key":"targeted_ticket_id","type":"string","label":"Targeted Ticket","helpText":"Please input the ticket id to be the target of the merge","required":true,"triggerId":108},{"key":"source_ticket_id","type":"string","label":"Ticket to be Merge","helpText":"Please input the ticket id you want to merge into the targeted ticket","required":true,"triggerId":108}],"authenticationId":51,"description":"Merge a ticket into targeted ticket","versionId":78,"examplePayload":null,"stateKeyMap":null,"isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-19T06:52:00.000Z","updatedAt":"2021-08-19T06:55:45.000Z","deletedAt":null,"id":271,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/tickets/{{{params.targeted_ticket_id}}}/merge.json","method":"post","headers":{"Accept":"application/json","Content-Type":"application/json"},"body":{"ids":"[{{params.source_ticket_id}}]","source_comment":"This request was closed and merged into request #{{params.targeted_ticket_id}} via otomatis.","target_comment":"Request #{{params.source_ticket_id}} was closed and merged into this request via otomatis."},"getBodyFunc":"({ params }) => ({\r\n  \"targeted_ticket_id\": params.targeted_ticket_id,\r\n  \"ids\": [params.source_ticket_id],\r\n  \"source_comment\": \"This request was closed and merged into request #{{params.targeted_ticket_id}} via otomatis.\",\r\n  \"target_comment\": \"Request #{{params.source_ticket_id}} was closed and merged into this request via otomatis.\"\r\n})","auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-08-19T07:01:27.813Z","updatedAt":"2021-08-27T09:45:41.610Z","deletedAt":null,"id":82,"name":"Merge User","type":"http","category":null,"applicationId":72,"httpRequestId":273,"paramSchema":[{"key":"targeted_user_id","type":"string","label":"Targeted User","helpText":"Please input the user id to be the target of the merge","required":true,"triggerId":107},{"key":"source_user_id","type":"string","label":"User to be Merge","helpText":"Please input the user id you want to merge into the targeted ticket","required":true,"triggerId":107}],"authenticationId":51,"description":"Merge a user into targeted user (existing user)","versionId":78,"examplePayload":null,"stateKeyMap":null,"isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-19T08:43:35.000Z","updatedAt":"2021-08-19T09:02:41.000Z","deletedAt":null,"id":273,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/users/{{{params.source_user_id}}}/merge.json","method":"put","headers":{"Accept":"application/json","Content-Type":"application/json"},"body":null,"getBodyFunc":"({ params }) => ({\r\n  \"user\": {\r\n    \"id\": params.targeted_user_id\r\n  }\r\n})","auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-08-16T09:36:24.115Z","updatedAt":"2021-08-30T10:54:49.736Z","deletedAt":null,"id":70,"name":"Add Internal Note on Ticket","type":"http","category":null,"applicationId":72,"httpRequestId":261,"paramSchema":[{"key":"id","type":"string","label":"Ticket Id","helpText":"Please input the ticket id here without (#) symbol. Example: 10xx","required":true,"triggerId":108},{"key":"comment","type":"string","label":"Comment (Internal Note)","required":true},{"key":"author_id","type":"string","label":"Author","helpText":"Please input the Zendesk's user_id here. Example: 38xxxxxxxxxx","required":true,"triggerId":107},{"key":"status","type":"string","label":"Status","required":true,"triggerId":109}],"authenticationId":51,"description":"Add internal note to ticket","versionId":78,"examplePayload":null,"stateKeyMap":null,"isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-16T09:43:52.000Z","updatedAt":"2021-08-16T10:03:01.000Z","deletedAt":null,"id":261,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/tickets/{{{params.id}}}.json","method":"put","headers":{"Accept":"application/json","Content-Type":"application/json"},"body":null,"getBodyFunc":"({ params }) => ({\r\n  \"ticket\": {\r\n    \"comment\": {\r\n      \"body\": params.comment,\r\n      \"public\": false, \r\n      \"author_id\": params.author_id\r\n    },\r\n    \"status\": params.status,\r\n    \"id\": params.id\r\n  }\r\n})","auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-08-18T06:10:24.463Z","updatedAt":"2021-11-26T07:23:15.824Z","deletedAt":null,"id":74,"name":"Find Ticket/User by Query","type":"http","category":null,"applicationId":72,"httpRequestId":265,"paramSchema":[{"key":"query","type":"string","label":"Query","helpText":"Please input the search query. For example, if you want to find unsolved tickets, use this query: \"type:ticket status<solved\" \nYou can see this link for reference https://support.zendesk.com/hc/en-us/articles/203663206-Searching-tickets","required":true}],"authenticationId":51,"description":"Find existing ticket or user by query","versionId":78,"examplePayload":null,"stateKeyMap":"","isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-18T06:55:31.000Z","updatedAt":"2021-08-18T07:13:42.000Z","deletedAt":null,"id":265,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/search.json?query={{{params.query}}}","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-11-19T09:30:48.611Z","updatedAt":"2021-11-22T10:49:47.812Z","deletedAt":null,"id":400,"name":"Upload Image","type":"script","category":null,"applicationId":72,"httpRequestId":871,"paramSchema":[{"key":"image_public_url","type":"string","label":"Image URL","required":true},{"key":"filename","type":"string","label":"File Name","helpText":"Enter how your file would be named in Zendesk","required":true}],"authenticationId":51,"description":"Upload Image for Attachment","versionId":78,"examplePayload":null,"stateKeyMap":"async ({ params, authData }, module) => {\r\n  const fs = module.require('fs')\r\n  const axios = module.require('axios')\r\n  // download image from image public URL and store it in './tmp/{timestamp}'\r\n  // todo: handling url not accessible, handling url not returning jpg,png,jpeg\r\n\r\n  const fileIsValid = (extension) => {\r\n    allowed_extensions = [\"jpg\",\"jpeg\",\"png\",\"gif\"]\r\n    const isValid = allowed_extensions.includes(extension)\r\n    return isValid\r\n  }\r\n  \r\n  const downloadImage = (imageURL) =>\r\n    axios({\r\n      url: imageURL,\r\n      responseType: 'stream',\r\n    }).then(\r\n      response =>\r\n        new Promise((resolve, reject) => {\r\n          const extension = response.headers['content-type'].split('/')[1]\r\n          if (fileIsValid(extension)) {\r\n            const filePath = `/tmp/${Date.now()}.${extension}`\r\n            response.data\r\n              // filename must be specific to user and unique, extention must be match the real image\r\n              .pipe(fs.createWriteStream(filePath))\r\n              .on('finish', () => resolve(filePath))\r\n              .on('error', e => reject(e))\r\n          } else {\r\n            throw new Error(\"Invalid content type\")\r\n          }\r\n        })\r\n    )\r\n  \r\n  // var data = await downloadImage(params.image_public_url)\r\n  const formObj = await downloadImage(params.image_public_url)\r\n    .then((filePath) => {\r\n      const payload = fs.createReadStream(filePath)\r\n      return payload\r\n    })\r\n    .catch(err => {\r\n      throw new Error(\"Something went wrong: \", err)\r\n    })\r\n  \r\n  var config = {\r\n    method: 'post',\r\n    url: `https://${authData.prefix}.zendesk.com/api/v2/uploads.json?filename=${params.filename}`,\r\n    headers: { \r\n      'Content-Type': 'application/binary'\r\n    },\r\n     auth: {\r\n            username: authData.username,\r\n            password: authData.password\r\n    },\r\n    data : formObj\r\n  };\r\n\r\n  const resp = await axios(config)\r\n  return resp.data\r\n}","isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-11-19T10:58:56.000Z","updatedAt":"2021-11-19T11:21:18.000Z","deletedAt":null,"id":871,"url":"https://d3v-bahasa-ai.zendesk.com/api/v2/attachments","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{}}},{"createdAt":"2021-08-07T15:09:17.558Z","updatedAt":"2021-12-22T10:42:24.980Z","deletedAt":null,"id":71,"name":"Create New Comment on Ticket","type":"http","category":null,"applicationId":72,"httpRequestId":262,"paramSchema":[{"key":"id","type":"string","label":"Ticket Id","helpText":"Please input the ticket id here without (#) symbol. Example: 10xx","required":true,"triggerId":108},{"key":"comment","type":"string","label":"Comment","required":true},{"key":"public","type":"string","label":"Publicy Status","default":"true","options":["true","false"],"helpText":"True for public comment, False for internal note","required":true},{"key":"author_id","type":"string","label":"Author","helpText":"Please input the Zendesk's user_id here. Example: 38xxxxxxxxxx","required":true,"triggerId":107},{"key":"status","type":"string","label":"Status","required":true,"triggerId":109},{"key":"token","type":"string","label":"Attachment Token"}],"authenticationId":51,"description":"Update ticket by adding comment","versionId":78,"examplePayload":null,"stateKeyMap":"","isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-08-07T15:31:18.000Z","updatedAt":"2021-08-07T15:46:38.000Z","deletedAt":null,"id":262,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/tickets/{{{params.id}}}.json","method":"put","headers":{"Accept":"application/json","Content-Type":"application/json"},"body":null,"getBodyFunc":"({ params }) => ({\r\n  \"ticket\": {\r\n    \"comment\": {\r\n      \"body\": params.comment,\r\n      \"public\": params.public, \r\n      \"author_id\": params.author_id,\r\n      \"uploads\": [\r\n        params.token\r\n      ]\r\n    },\r\n    \"status\": params.status,\r\n    \"id\": params.id\r\n  }\r\n})","auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-09-01T10:33:46.014Z","updatedAt":"2022-01-17T08:50:08.755Z","deletedAt":null,"id":414,"name":"Find Ticket by Custom Field's Value","type":"http","category":null,"applicationId":72,"httpRequestId":894,"paramSchema":[{"key":"identifier","type":"string","label":"Keyword (id)","required":true}],"authenticationId":51,"description":"Return a ticket with the keyword (id) you submit. But mainly, It will find your ticket if the keyword (id) is stored in a custom field.","versionId":78,"examplePayload":null,"stateKeyMap":"async ({ authData, data, params }, module) => {\r\n    if(data.count>0 && data.results[0]!=null && data.results[0].status!='solved' && data.results[0].status!='closed'){\r\n      return data.results[0]\r\n    }\r\n\r\n  let page = 1\r\n  const axios = module.require('axios')\r\n  while(page<=5){\r\n    const respIds = await axios.get(`https://${authData.prefix}.zendesk.com/api/v2/tickets?page=${page}&sort_by=created_at&sort_order=desc`, {\r\n          auth: {\r\n              username: authData.username,\r\n              password: authData.password\r\n          }\r\n      })\r\n    for(let ticket of respIds.data.tickets){\r\n      for(let field of ticket.fields){\r\n        if(field.value == params.identifier && ticket.status!='solved' && ticket.status!='closed'){\r\n          return ticket\r\n        }\r\n      }\r\n    }\r\n    page = page + 1\r\n  }\r\n    return {data: 'ticket not found'}\r\n}","isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-09-01T10:41:22.000Z","updatedAt":"2021-09-01T10:49:51.000Z","deletedAt":null,"id":894,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/search.json?query=type:ticket status<solved {{{[params].[identifier]}}}","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-09-01T10:33:46.014Z","updatedAt":"2021-12-03T11:19:11.940Z","deletedAt":null,"id":255,"name":"Find Newly Created Ticket","type":"http","category":null,"applicationId":72,"httpRequestId":635,"paramSchema":[{"key":"identifier","type":"string","label":"eCommerce Id","required":true}],"authenticationId":51,"description":"Return a recently created ticket which not found by the search","versionId":78,"examplePayload":null,"stateKeyMap":"async ({ authData, data, params }, module) => {\r\n  let page = 1\r\n  const axios = module.require('axios')\r\n  while(page<=5){\r\n    const respIds = await axios.get(`https://${authData.prefix}.zendesk.com/api/v2/tickets?page=${page}&sort_by=created_at&sort_order=desc`, {\r\n          auth: {\r\n              username: authData.username,\r\n              password: authData.password\r\n          }\r\n      })\r\n    for(let ticket of respIds.data.tickets){\r\n      for(let field of ticket.fields){\r\n        if(field.value == params.identifier && ticket.status!='solved' && ticket.status!='closed'){\r\n          return ticket\r\n        }\r\n      }\r\n    }\r\n    page = page + 1\r\n  }\r\n\r\n    // for(let ticket of data.tickets){\r\n    //   for(let field of ticket.fields){\r\n    //     if(field.value == params.identifier){\r\n    //       return ticket\r\n    //     }\r\n    //   }\r\n    // }\r\n    return {data: 'ticket not found'}\r\n}","isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-09-01T10:41:22.000Z","updatedAt":"2021-09-01T10:49:51.000Z","deletedAt":null,"id":635,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/tickets?sort_by=created_at&sort_order=desc","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2021-11-19T09:30:48.611Z","updatedAt":"2021-11-19T13:12:03.779Z","deletedAt":null,"id":356,"name":"Upload File","type":"http","category":null,"applicationId":72,"httpRequestId":821,"paramSchema":[{"key":"url","type":"string","label":"Image URL","required":true},{"key":"filename","type":"string","label":"File Name","helpText":"Enter how your file would be named in Zendesk","required":true},{"key":"file","type":"string","label":"File","getValueFunc":"async ({ authData, params }, module) => {\r\n    if (!authData || !params || !authData.prefix || !params.url) return []\r\n\r\n    // const axios = module.require('axios')\r\n    // const converted_file = await axios.get(params.url)\r\n\r\n    const FormData = module.require('form-data');\r\n    const fs = module.require('fs');\r\n    const form = new FormData();\r\n    form.append('file', fs.createReadStream('@/C:/Users/mario/OneDrive/Documents/Bahasa.ai/Apps Logo/otomatis_tokopedia seller.png'));\r\n\r\n    // return converted_file\r\n    return form\r\n}"}],"authenticationId":51,"description":"Upload File for Attachment","versionId":78,"examplePayload":null,"stateKeyMap":"async ({ authData, params }, module) => {\r\n    if (!authData || !params || !authData.prefix || !params.url) return []\r\n\r\n    const FormData = module.require('form-data');\r\n    const fs = module.require('fs');\r\n    const form = new FormData();\r\n    form.append('file', fs.createReadStream(params.url));\r\n\r\n    var axios = module.require('axios');\r\n    // var data = '<file contents here>';\r\n\r\n    var config = {\r\n      method: 'post',\r\n      url: `https://${authData.prefix}.zendesk.com/api/v2/uploads.json?filename=${params.filename}`,\r\n      headers: { \r\n        'Content-Type': 'application/binary'\r\n      },\r\n      auth: {\r\n            username: authData.username,\r\n            password: authData.password\r\n      },\r\n      data : form\r\n    };\r\n\r\n    axios(config)\r\n    .then(function (response) {\r\n      console.log(JSON.stringify(response.data));\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n}","isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-11-19T10:58:56.000Z","updatedAt":"2021-11-19T11:21:18.000Z","deletedAt":null,"id":821,"url":"https://d3v-bahasa-ai.zendesk.com/api/v2/attachments","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{}}},{"createdAt":"2021-05-08T03:14:11.322Z","updatedAt":"2021-12-22T10:48:03.318Z","deletedAt":null,"id":85,"name":"Create Ticket","type":"http","category":null,"applicationId":72,"httpRequestId":276,"paramSchema":[{"key":"form","type":"string","label":"Ticket Form","required":true,"triggerId":104},{"key":"subject","type":"string","label":"Subject","required":true},{"key":"comment","type":"string","label":"Comment","required":true},{"key":"public","type":"string","label":"Comment's Publicy Status","default":"true","options":["true","false"],"helpText":"True for public comment, False for internal note","required":true},{"key":"requester_id","type":"string","label":"Requester","helpText":"Use Zendesk's user_id to set the ticket's requester. If you leave this field empty, the requester will be set to your login account.","required":false,"triggerId":107},{"key":"tags","type":"string","label":"Tags","helpText":"Tags will be helpful to identify the ticket. If you want to enter more than one tag, use comma (,) as the separator and no space. Example: message,tokopedia","required":false},{"key":"type","type":"string","label":"Type","triggerId":103},{"key":"priority","type":"string","label":"Priority","triggerId":101},{"key":"token","type":"string","label":"Attachment Token"},{"key":"","type":"Dynamic Field","label":"Dynamic Field","required":false,"paramSchemaFunc":"async ({ authData, params }, module) => {\n    if (!authData || !params || !authData.prefix || !params.form) return []\n\n    const axios = module.require('axios')\n    const respIds = await axios.get(`https://${authData.prefix}.zendesk.com/api/v2/ticket_forms/${params.form}.json`, {\n        auth: {\n            username: authData.username,\n            password: authData.password\n        }\n    })\n    const ids = respIds.data.ticket_form.ticket_field_ids\n    const respFields = await axios.get(`https://${authData.prefix}.zendesk.com/api/v2/ticket_fields.json`, {\n        auth: {\n            username: authData.username,\n            password: authData.password\n        }\n    })\n    return respFields.data.ticket_fields.filter(f => f.removable && ids.includes(f.id)).map(f => ({\n        key: f.id,\n        label: f.title,\n        type: 'string',\n        options: (f.custom_field_options || f.system_field_options) && (f.custom_field_options || f.system_field_options).length ? (f.custom_field_options || f.system_field_options).map(c => c.value) : undefined\n    }))\n}"}],"authenticationId":51,"description":"Create new ticket","versionId":78,"examplePayload":null,"stateKeyMap":null,"isDraft":false,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2021-05-08T03:14:11.000Z","updatedAt":"2021-07-28T14:14:30.000Z","deletedAt":null,"id":276,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/tickets.json","method":"post","headers":{"Accept":"application/json","Content-Type":"application/json"},"body":null,"getBodyFunc":"({ params }) => ({\n  \"ticket\": {\n    \"comment\": {\n      \"body\": params.comment,\n      \"public\":params.public,\n      \"uploads\": [\n        params.token\n      ]\n    },\n    \"tags\": params.tags,\n    \"subject\": params.subject,\n    \"ticket_form_id\": params.form,\n    \"requester_id\": params.requester_id,\n    \"type\": params.type,\n    \"priority\": params.priority,\n    \"custom_fields\": Object.keys(params).filter(p => !isNaN(p)).map(p => ({ id: p, value: params[p] }))\n  }\n})","auth":{"password":"{{{authData.password}}}","username":"{{{authData.username}}}"}}},{"createdAt":"2022-04-26T03:30:36.435Z","updatedAt":"2022-04-26T04:14:42.034Z","deletedAt":null,"id":813,"name":"Testing Issue","type":"http","category":"search","applicationId":72,"httpRequestId":1599,"paramSchema":[],"authenticationId":51,"description":"for testing only","versionId":78,"examplePayload":null,"stateKeyMap":"async ({authData, globalVar}) => {\n    if (!authData || !authData.prefix) return []\n\n    // const axios = require('axios')\n    // const tickets = await axios.get(`https://${authData.prefix}.zendesk.com/api/v2/search.json?query=type:ticket 3904`, {\n    //     auth: {\n    //         username: authData.username,\n    //         password: authData.password\n    //     }\n    // })\n    const tickets = globalVar.searchData(authData, 'type:ticket 3904')\n    \n    return tickets\n}","isDraft":true,"idempotencyKeyMap":null,"httpRequest":{"createdAt":"2022-04-26T03:36:18.137Z","updatedAt":"2022-04-26T03:43:45.217Z","deletedAt":null,"id":1599,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/users/me","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.token}}}","username":"{{{authData.username}}}"}}}],"globalVariables":[{"createdAt":"2022-04-14T07:32:37.010Z","updatedAt":"2022-04-14T07:32:37.010Z","deletedAt":null,"id":21,"name":"test","type":"function","applicationId":72,"globalVariableValue":{"function":"(...numbers)=>{\n  var result = 0\n  for(var number of numbers){\n    result = result + number\n  }\n  return result\n}"},"description":null,"versionId":78},{"createdAt":"2022-04-26T03:51:47.457Z","updatedAt":"2022-04-26T04:31:45.808Z","deletedAt":null,"id":33,"name":"searchData","type":"function","applicationId":72,"globalVariableValue":{"function":"async (authData, query) => {\n    if (!authData || !authData.prefix) return []\n\n    const axios = require('axios')\n    const tickets = await axios.get(`https://${authData.prefix}.zendesk.com/api/v2/search.json?query=${query}`, {\n        auth: {\n            username: authData.username,\n            password: authData.password\n        }\n    })\n    \n    return tickets.data\n}"},"description":null,"versionId":78}],"versions":[{"createdAt":"2021-05-07T09:16:46.822Z","updatedAt":"2021-07-28T14:22:56.533Z","deletedAt":null,"id":78,"name":"2.0.0","applicationId":72,"isActive":true}],"authentications":[{"createdAt":"2021-05-07T09:29:14.725Z","updatedAt":"2021-05-07T09:29:14.725Z","deletedAt":null,"id":51,"uuid":"fc461ec9-4ab3-49b7-afe3-20983b9c2834","authenticationSchemaId":1,"fieldSchema":[{"key":"username","type":"string","label":"Username","required":true},{"key":"prefix","type":"string","label":"Prefix","helpText":"Get prefix/subdomain from your base URL your Zendesk account","required":true},{"key":"password","type":"password","label":"Password","helpText":"","required":true}],"testHttpRequestId":252,"clientId":null,"clientSecret":null,"getUserFunc":null,"authHttpRequestId":null,"reqTokenHttpRequestId":null,"refreshTokenHttpRequestId":null,"applicationId":72,"versionId":78,"examplePayload":null,"isDraft":false,"helpText":null,"testHttpRequest":{"createdAt":"2021-05-07T09:29:14.000Z","updatedAt":"2021-05-08T03:03:23.042Z","deletedAt":null,"id":252,"url":"https://{{{authData.prefix}}}.zendesk.com/api/v2/users/me","method":"get","headers":{},"body":null,"getBodyFunc":null,"auth":{"password":"{{{authData.token}}}","username":"{{{authData.username}}}"}},"authHttpRequest":null,"reqTokenHttpRequest":null,"refreshTokenHttpRequest":null}]}